name: CUDA-WASM CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'cuda-wasm/**'
      - '.github/workflows/cuda-wasm-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'cuda-wasm/**'
  schedule:
    # Weekly comprehensive test on Sundays
    - cron: '0 2 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        node: [18, 20]
        include:
          - os: ubuntu-latest
            rust: 1.81.0  # MSRV
          - os: ubuntu-latest
            rust: stable
            cuda: true

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'
        cache-dependency-path: 'cuda-wasm/package-lock.json'

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: wasm32-unknown-unknown
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          cuda-wasm/target
          cuda-wasm/node_modules
        key: ${{ runner.os }}-cuda-wasm-${{ matrix.rust }}-node${{ matrix.node }}-${{ hashFiles('cuda-wasm/Cargo.lock', 'cuda-wasm/package-lock.json') }}

    - name: Install Node.js dependencies
      working-directory: cuda-wasm
      run: npm ci

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      working-directory: cuda-wasm
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      working-directory: cuda-wasm
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Lint JavaScript/TypeScript
      if: matrix.os == 'ubuntu-latest' && matrix.node == '20'
      working-directory: cuda-wasm
      run: npm run lint

    - name: Build (native)
      working-directory: cuda-wasm
      run: cargo build --verbose --all-features

    - name: Build (WASM)
      working-directory: cuda-wasm
      run: cargo build --target wasm32-unknown-unknown --verbose --all-features

    - name: Run Rust tests
      working-directory: cuda-wasm
      run: cargo test --all-features --verbose

    - name: Run JavaScript tests
      working-directory: cuda-wasm
      run: npm test

    - name: Run WASM tests
      working-directory: cuda-wasm
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        wasm-pack test --headless --chrome

    - name: Test CUDA features (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.cuda == true
      working-directory: cuda-wasm
      run: |
        sudo apt-get update
        sudo apt-get install -y nvidia-cuda-toolkit
        cargo test --features cuda-backend -- --test-threads=1

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          cuda-wasm/target
        key: ${{ runner.os }}-cuda-wasm-bench-${{ hashFiles('cuda-wasm/Cargo.lock') }}

    - name: Run benchmarks
      working-directory: cuda-wasm
      run: cargo bench --all-features

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'cargo'
        output-file-path: cuda-wasm/target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: true

  cross-compile:
    name: Cross Compilation
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-musl

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Cross-compile
      working-directory: cuda-wasm
      run: cross build --target ${{ matrix.target }} --all-features --release

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      working-directory: cuda-wasm
      run: cargo audit

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Check licenses and advisories
      working-directory: cuda-wasm
      run: cargo deny check

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          cuda-wasm/target
        key: ${{ runner.os }}-cuda-wasm-docs-${{ hashFiles('cuda-wasm/Cargo.lock') }}

    - name: Build documentation
      working-directory: cuda-wasm
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./cuda-wasm/target/doc
        destination_dir: cuda-wasm
        force_orphan: true

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    needs: [test, benchmark, cross-compile, security-audit]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check if version bumped
      id: version-check
      working-directory: cuda-wasm
      run: |
        if git diff HEAD~1 Cargo.toml | grep -q "^+version"; then
          echo "version_bumped=true" >> $GITHUB_OUTPUT
        else
          echo "version_bumped=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate changelog
      if: steps.version-check.outputs.version_bumped == 'true'
      working-directory: cuda-wasm
      run: |
        if ! grep -q "## \[$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')\]" CHANGELOG.md; then
          echo "Version bump detected but CHANGELOG.md not updated"
          exit 1
        fi

    - name: Check package
      working-directory: cuda-wasm
      run: cargo package --all-features

    - name: Check publish readiness
      working-directory: cuda-wasm
      run: cargo publish --dry-run --all-features