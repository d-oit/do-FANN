name: OpenCV-Rust CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'opencv-rust/**'
      - '.github/workflows/opencv-rust-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'opencv-rust/**'
  schedule:
    # Weekly comprehensive test on Sundays
    - cron: '0 4 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: 1.81.0  # MSRV
          - os: ubuntu-latest
            rust: stable
            opencv: true

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          opencv-rust/target
          opencv-rust/**/target
        key: ${{ runner.os }}-opencv-rust-${{ matrix.rust }}-${{ hashFiles('opencv-rust/Cargo.lock', 'opencv-rust/**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev clang libclang-dev llvm-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install opencv

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install opencv -y

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      working-directory: opencv-rust
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      working-directory: opencv-rust
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build workspace
      working-directory: opencv-rust
      run: cargo build --verbose --all-features

    - name: Run tests
      working-directory: opencv-rust
      run: cargo test --all-features --verbose

    - name: Run doctests
      working-directory: opencv-rust
      run: cargo test --doc --all-features

    - name: Test OpenCV integration (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.opencv == true
      working-directory: opencv-rust
      run: |
        # Test with actual OpenCV if available
        cargo test --features opencv-integration -- --test-threads=1 || echo "OpenCV integration tests skipped"

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev clang libclang-dev llvm-dev

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          opencv-rust/target
        key: ${{ runner.os }}-opencv-rust-bench-${{ hashFiles('opencv-rust/Cargo.lock') }}

    - name: Run benchmarks
      working-directory: opencv-rust
      run: cargo bench --all-features

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'cargo'
        output-file-path: opencv-rust/target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: true

  cross-compile:
    name: Cross Compilation
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-musl

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Install cross dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++-aarch64-linux-gnu gcc-aarch64-linux-gnu

    - name: Cross-compile
      working-directory: opencv-rust
      run: cross build --target ${{ matrix.target }} --all-features --release

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      working-directory: opencv-rust
      run: cargo audit

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Check licenses and advisories
      working-directory: opencv-rust
      run: cargo deny check

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev clang libclang-dev llvm-dev

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          opencv-rust/target
        key: ${{ runner.os }}-opencv-rust-docs-${{ hashFiles('opencv-rust/Cargo.lock') }}

    - name: Build documentation
      working-directory: opencv-rust
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./opencv-rust/target/doc
        destination_dir: opencv-rust
        force_orphan: true

  examples:
    name: Example Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev clang libclang-dev llvm-dev

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          opencv-rust/target
        key: ${{ runner.os }}-opencv-rust-examples-${{ hashFiles('opencv-rust/Cargo.lock') }}

    - name: Build examples
      working-directory: opencv-rust
      run: cargo build --examples --all-features

    - name: Test examples (with timeout)
      working-directory: opencv-rust
      run: |
        # List available examples
        cargo build --examples --all-features
        # Run examples with timeout to prevent hanging
        for example in $(find target/debug/examples -maxdepth 1 -type f -executable | head -3); do
          timeout 60s $example || [ $? -eq 124 ] || echo "Example $example completed"
        done

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    needs: [test, benchmark, cross-compile, security-audit, examples]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check if version bumped
      id: version-check
      working-directory: opencv-rust
      run: |
        if git diff HEAD~1 Cargo.toml | grep -q "^+version"; then
          echo "version_bumped=true" >> $GITHUB_OUTPUT
        else
          echo "version_bumped=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate changelog
      if: steps.version-check.outputs.version_bumped == 'true'
      working-directory: opencv-rust
      run: |
        if ! grep -q "## \[$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')\]" CHANGELOG.md; then
          echo "Version bump detected but CHANGELOG.md not updated"
          exit 1
        fi

    - name: Check workspace packages
      working-directory: opencv-rust
      run: cargo package --all-features

    - name: Check publish readiness
      working-directory: opencv-rust
      run: cargo publish --dry-run --all-features