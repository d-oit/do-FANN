name: Security & Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Daily security scan
    - cron: '0 6 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Check license compliance
      run: |
        cargo deny check licenses
        cargo deny check bans

    - name: Check for unapproved licenses
      run: |
        cargo deny check licenses --format json | jq '.licenses[] | select(.kind == "exception")'

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo audit
      run: cargo audit --format json --output audit-report.json || true

    - name: Install cargo-audit with advisory-db
      run: cargo install cargo-audit --features binary-scanning

    - name: Run cargo audit with advisory database
      run: cargo audit bin --db ./advisory-db || true

    - name: Upload audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cargo-audit-report
        path: audit-report.json

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies (main)
      run: npm install --no-audit --no-fund

    - name: Install dependencies (ruv-swarm)
      working-directory: ruv-swarm/npm
      run: npm install --no-audit --no-fund

    - name: Install dependencies (cuda-wasm)
      working-directory: cuda-wasm
      run: npm install --no-audit --no-fund

    - name: Run npm audit (main)
      run: npm audit --audit-level moderate --json > npm-audit-main.json || true

    - name: Run npm audit (ruv-swarm)
      working-directory: ruv-swarm/npm
      run: npm audit --audit-level moderate --json > npm-audit-ruv-swarm.json || true

    - name: Run npm audit (cuda-wasm)
      working-directory: cuda-wasm
      run: npm audit --audit-level moderate --json > npm-audit-cuda-wasm.json || true

    - name: Upload npm audit reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-reports
        path: |
          npm-audit-main.json
          ruv-swarm/npm/npm-audit-ruv-swarm.json
          cuda-wasm/npm-audit-cuda-wasm.json

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'rust' ]

    steps:
    - uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  fuzz-testing:
    name: Fuzz Testing
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt, clippy

    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz

    - name: Run fuzz tests (limited time)
      run: |
        # Run fuzz tests for a limited time to avoid timeouts
        timeout 300s cargo fuzz run neural_network -- -max_total_time=240 || true
        timeout 300s cargo fuzz run parser -- -max_total_time=240 || true

    - name: Upload fuzzing artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: fuzz-artifacts
        path: fuzz/artifacts/

  memory-safety:
    name: Memory Safety Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri

    - name: Install Miri
      run: |
        rustup component add miri
        cargo miri setup

    - name: Run Miri (limited scope)
      run: |
        # Run Miri on specific safe functions to avoid timeouts
        export MIRIFLAGS="-Zmiri-disable-isolation"
        timeout 600s cargo miri test --lib -- --skip integration || true

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Verify Cargo.lock integrity
      run: |
        # Check for any unexpected changes in Cargo.lock
        git diff HEAD~1 Cargo.lock || echo "Cargo.lock unchanged"

    - name: Check for yanked dependencies
      run: |
        cargo update --dry-run | grep -i yanked || echo "No yanked dependencies found"

    - name: Verify minimum versions
      run: |
        cargo update --package --precise 0.0.0 || true
        cargo check

  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [license-check, dependency-scan, npm-audit, codeql-analysis, secret-scan]
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Download all security reports
      uses: actions/download-artifact@v4
      with:
        path: security-reports

    - name: Generate compliance summary
      run: |
        echo "# Security & Compliance Report" > compliance-report.md
        echo "" >> compliance-report.md
        echo "## Summary" >> compliance-report.md
        echo "" >> compliance-report.md

        # Check job statuses
        if [ "${{ needs.license-check.result }}" = "success" ]; then
          echo "‚úÖ License compliance: PASSED" >> compliance-report.md
        else
          echo "‚ùå License compliance: FAILED" >> compliance-report.md
        fi

        if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
          echo "‚úÖ Dependency scan: PASSED" >> compliance-report.md
        else
          echo "‚ùå Dependency scan: FAILED" >> compliance-report.md
        fi

        if [ "${{ needs.npm-audit.result }}" = "success" ]; then
          echo "‚úÖ NPM audit: PASSED" >> compliance-report.md
        else
          echo "‚ùå NPM audit: FAILED" >> compliance-report.md
        fi

        if [ "${{ needs.codeql-analysis.result }}" = "success" ]; then
          echo "‚úÖ CodeQL analysis: PASSED" >> compliance-report.md
        else
          echo "‚ùå CodeQL analysis: FAILED" >> compliance-report.md
        fi

        if [ "${{ needs.secret-scan.result }}" = "success" ]; then
          echo "‚úÖ Secret scan: PASSED" >> compliance-report.md
        else
          echo "‚ùå Secret scan: FAILED" >> compliance-report.md
        fi

        echo "" >> compliance-report.md
        echo "## Details" >> compliance-report.md
        echo "" >> compliance-report.md

        # Add details from reports if available
        if [ -f "security-reports/cargo-audit-report/audit-report.json" ]; then
          echo "### Cargo Audit Results" >> compliance-report.md
          cat security-reports/cargo-audit-report/audit-report.json | jq '.vulnerabilities.count' >> compliance-report.md
          echo "" >> compliance-report.md
        fi

    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.md

    - name: Comment on PR with compliance status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let report = fs.readFileSync('compliance-report.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [license-check, dependency-scan, npm-audit, codeql-analysis, secret-scan, memory-safety]
    if: always()

    steps:
    - name: Security gate check
      run: |
        # Define critical security criteria
        CRITICAL_ISSUES=0

        # Check for critical vulnerabilities
        if [ "${{ needs.dependency-scan.result }}" = "failure" ]; then
          echo "‚ùå Critical: Dependency vulnerabilities found"
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
        fi

        if [ "${{ needs.secret-scan.result }}" = "failure" ]; then
          echo "‚ùå Critical: Secrets detected in code"
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
        fi

        if [ "${{ needs.codeql-analysis.result }}" = "failure" ]; then
          echo "‚ùå Critical: CodeQL security issues found"
          CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
        fi

        # Allow some non-critical issues to pass
        if [ "${{ needs.license-check.result }}" = "failure" ]; then
          echo "‚ö†Ô∏è Warning: License compliance issues"
        fi

        if [ "${{ needs.npm-audit.result }}" = "failure" ]; then
          echo "‚ö†Ô∏è Warning: NPM vulnerabilities found"
        fi

        # Fail only on critical issues
        if [ $CRITICAL_ISSUES -gt 0 ]; then
          echo "üö´ Security gate: BLOCKED"
          exit 1
        else
          echo "‚úÖ Security gate: PASSED"
        fi